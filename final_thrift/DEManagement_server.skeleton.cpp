// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DEManagement.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::kuber;

class DEManagementHandler : virtual public DEManagementIf {
 public:
  DEManagementHandler() {
    // Your initialization goes here
  }

  int32_t add_dmEngine(const std::string& name, const std::string& fileName, const int32_t port) {
    // Your implementation goes here
    	char doCommand[500];
    	char command[500];
	sprintf(doCommand,"docker import /home/kuber/DockerImages/%s %s:new",fileName.c_str(),name.c_str());
	system(doCommand);
	sprintf(command,"kubectl run %s --image=%s --replicas=1 --port=%d",name.c_str(),name.c_str(),port);
	system(command);	
  }

  int32_t remove_dmEngine(const std::string& name) {
	  char command[500];
	  sprintf(command,"kubectl delete deployment %s",name.c_str());
	  system(command);
  }

  int32_t describe_dmEngine(const std::string& name) {
	  char command[500];
	  sprintf(command,"kubectl describe deployment %s",name.c_str());
	  system(command);
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<DEManagementHandler> handler(new DEManagementHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new DEManagementProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

