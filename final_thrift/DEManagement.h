/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DEManagement_H
#define DEManagement_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "kuber_types.h"

namespace kuber {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DEManagementIf {
 public:
  virtual ~DEManagementIf() {}
  virtual int32_t add_dmEngine(const std::string& name, const std::string& fileName, const int32_t port) = 0;
  virtual int32_t remove_dmEngine(const std::string& name) = 0;
  virtual int32_t describe_dmEngine(const std::string& name) = 0;
};

class DEManagementIfFactory {
 public:
  typedef DEManagementIf Handler;

  virtual ~DEManagementIfFactory() {}

  virtual DEManagementIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DEManagementIf* /* handler */) = 0;
};

class DEManagementIfSingletonFactory : virtual public DEManagementIfFactory {
 public:
  DEManagementIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<DEManagementIf>& iface) : iface_(iface) {}
  virtual ~DEManagementIfSingletonFactory() {}

  virtual DEManagementIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DEManagementIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<DEManagementIf> iface_;
};

class DEManagementNull : virtual public DEManagementIf {
 public:
  virtual ~DEManagementNull() {}
  int32_t add_dmEngine(const std::string& /* name */, const std::string& /* fileName */, const int32_t /* port */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t remove_dmEngine(const std::string& /* name */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t describe_dmEngine(const std::string& /* name */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _DEManagement_add_dmEngine_args__isset {
  _DEManagement_add_dmEngine_args__isset() : name(false), fileName(false), port(false) {}
  bool name :1;
  bool fileName :1;
  bool port :1;
} _DEManagement_add_dmEngine_args__isset;

class DEManagement_add_dmEngine_args {
 public:

  DEManagement_add_dmEngine_args(const DEManagement_add_dmEngine_args&);
  DEManagement_add_dmEngine_args& operator=(const DEManagement_add_dmEngine_args&);
  DEManagement_add_dmEngine_args() : name(), fileName(), port(0) {
  }

  virtual ~DEManagement_add_dmEngine_args() throw();
  std::string name;
  std::string fileName;
  int32_t port;

  _DEManagement_add_dmEngine_args__isset __isset;

  void __set_name(const std::string& val);

  void __set_fileName(const std::string& val);

  void __set_port(const int32_t val);

  bool operator == (const DEManagement_add_dmEngine_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(fileName == rhs.fileName))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const DEManagement_add_dmEngine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DEManagement_add_dmEngine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DEManagement_add_dmEngine_pargs {
 public:


  virtual ~DEManagement_add_dmEngine_pargs() throw();
  const std::string* name;
  const std::string* fileName;
  const int32_t* port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DEManagement_add_dmEngine_result__isset {
  _DEManagement_add_dmEngine_result__isset() : success(false) {}
  bool success :1;
} _DEManagement_add_dmEngine_result__isset;

class DEManagement_add_dmEngine_result {
 public:

  DEManagement_add_dmEngine_result(const DEManagement_add_dmEngine_result&);
  DEManagement_add_dmEngine_result& operator=(const DEManagement_add_dmEngine_result&);
  DEManagement_add_dmEngine_result() : success(0) {
  }

  virtual ~DEManagement_add_dmEngine_result() throw();
  int32_t success;

  _DEManagement_add_dmEngine_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DEManagement_add_dmEngine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DEManagement_add_dmEngine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DEManagement_add_dmEngine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DEManagement_add_dmEngine_presult__isset {
  _DEManagement_add_dmEngine_presult__isset() : success(false) {}
  bool success :1;
} _DEManagement_add_dmEngine_presult__isset;

class DEManagement_add_dmEngine_presult {
 public:


  virtual ~DEManagement_add_dmEngine_presult() throw();
  int32_t* success;

  _DEManagement_add_dmEngine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DEManagement_remove_dmEngine_args__isset {
  _DEManagement_remove_dmEngine_args__isset() : name(false) {}
  bool name :1;
} _DEManagement_remove_dmEngine_args__isset;

class DEManagement_remove_dmEngine_args {
 public:

  DEManagement_remove_dmEngine_args(const DEManagement_remove_dmEngine_args&);
  DEManagement_remove_dmEngine_args& operator=(const DEManagement_remove_dmEngine_args&);
  DEManagement_remove_dmEngine_args() : name() {
  }

  virtual ~DEManagement_remove_dmEngine_args() throw();
  std::string name;

  _DEManagement_remove_dmEngine_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const DEManagement_remove_dmEngine_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const DEManagement_remove_dmEngine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DEManagement_remove_dmEngine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DEManagement_remove_dmEngine_pargs {
 public:


  virtual ~DEManagement_remove_dmEngine_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DEManagement_remove_dmEngine_result__isset {
  _DEManagement_remove_dmEngine_result__isset() : success(false) {}
  bool success :1;
} _DEManagement_remove_dmEngine_result__isset;

class DEManagement_remove_dmEngine_result {
 public:

  DEManagement_remove_dmEngine_result(const DEManagement_remove_dmEngine_result&);
  DEManagement_remove_dmEngine_result& operator=(const DEManagement_remove_dmEngine_result&);
  DEManagement_remove_dmEngine_result() : success(0) {
  }

  virtual ~DEManagement_remove_dmEngine_result() throw();
  int32_t success;

  _DEManagement_remove_dmEngine_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DEManagement_remove_dmEngine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DEManagement_remove_dmEngine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DEManagement_remove_dmEngine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DEManagement_remove_dmEngine_presult__isset {
  _DEManagement_remove_dmEngine_presult__isset() : success(false) {}
  bool success :1;
} _DEManagement_remove_dmEngine_presult__isset;

class DEManagement_remove_dmEngine_presult {
 public:


  virtual ~DEManagement_remove_dmEngine_presult() throw();
  int32_t* success;

  _DEManagement_remove_dmEngine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DEManagement_describe_dmEngine_args__isset {
  _DEManagement_describe_dmEngine_args__isset() : name(false) {}
  bool name :1;
} _DEManagement_describe_dmEngine_args__isset;

class DEManagement_describe_dmEngine_args {
 public:

  DEManagement_describe_dmEngine_args(const DEManagement_describe_dmEngine_args&);
  DEManagement_describe_dmEngine_args& operator=(const DEManagement_describe_dmEngine_args&);
  DEManagement_describe_dmEngine_args() : name() {
  }

  virtual ~DEManagement_describe_dmEngine_args() throw();
  std::string name;

  _DEManagement_describe_dmEngine_args__isset __isset;

  void __set_name(const std::string& val);

  bool operator == (const DEManagement_describe_dmEngine_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const DEManagement_describe_dmEngine_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DEManagement_describe_dmEngine_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DEManagement_describe_dmEngine_pargs {
 public:


  virtual ~DEManagement_describe_dmEngine_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DEManagement_describe_dmEngine_result__isset {
  _DEManagement_describe_dmEngine_result__isset() : success(false) {}
  bool success :1;
} _DEManagement_describe_dmEngine_result__isset;

class DEManagement_describe_dmEngine_result {
 public:

  DEManagement_describe_dmEngine_result(const DEManagement_describe_dmEngine_result&);
  DEManagement_describe_dmEngine_result& operator=(const DEManagement_describe_dmEngine_result&);
  DEManagement_describe_dmEngine_result() : success(0) {
  }

  virtual ~DEManagement_describe_dmEngine_result() throw();
  int32_t success;

  _DEManagement_describe_dmEngine_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const DEManagement_describe_dmEngine_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DEManagement_describe_dmEngine_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DEManagement_describe_dmEngine_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DEManagement_describe_dmEngine_presult__isset {
  _DEManagement_describe_dmEngine_presult__isset() : success(false) {}
  bool success :1;
} _DEManagement_describe_dmEngine_presult__isset;

class DEManagement_describe_dmEngine_presult {
 public:


  virtual ~DEManagement_describe_dmEngine_presult() throw();
  int32_t* success;

  _DEManagement_describe_dmEngine_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DEManagementClient : virtual public DEManagementIf {
 public:
  DEManagementClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DEManagementClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t add_dmEngine(const std::string& name, const std::string& fileName, const int32_t port);
  void send_add_dmEngine(const std::string& name, const std::string& fileName, const int32_t port);
  int32_t recv_add_dmEngine();
  int32_t remove_dmEngine(const std::string& name);
  void send_remove_dmEngine(const std::string& name);
  int32_t recv_remove_dmEngine();
  int32_t describe_dmEngine(const std::string& name);
  void send_describe_dmEngine(const std::string& name);
  int32_t recv_describe_dmEngine();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DEManagementProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<DEManagementIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DEManagementProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add_dmEngine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_dmEngine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_describe_dmEngine(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DEManagementProcessor(::apache::thrift::stdcxx::shared_ptr<DEManagementIf> iface) :
    iface_(iface) {
    processMap_["add_dmEngine"] = &DEManagementProcessor::process_add_dmEngine;
    processMap_["remove_dmEngine"] = &DEManagementProcessor::process_remove_dmEngine;
    processMap_["describe_dmEngine"] = &DEManagementProcessor::process_describe_dmEngine;
  }

  virtual ~DEManagementProcessor() {}
};

class DEManagementProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DEManagementProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< DEManagementIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< DEManagementIfFactory > handlerFactory_;
};

class DEManagementMultiface : virtual public DEManagementIf {
 public:
  DEManagementMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<DEManagementIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DEManagementMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<DEManagementIf> > ifaces_;
  DEManagementMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<DEManagementIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t add_dmEngine(const std::string& name, const std::string& fileName, const int32_t port) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_dmEngine(name, fileName, port);
    }
    return ifaces_[i]->add_dmEngine(name, fileName, port);
  }

  int32_t remove_dmEngine(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_dmEngine(name);
    }
    return ifaces_[i]->remove_dmEngine(name);
  }

  int32_t describe_dmEngine(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->describe_dmEngine(name);
    }
    return ifaces_[i]->describe_dmEngine(name);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DEManagementConcurrentClient : virtual public DEManagementIf {
 public:
  DEManagementConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DEManagementConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t add_dmEngine(const std::string& name, const std::string& fileName, const int32_t port);
  int32_t send_add_dmEngine(const std::string& name, const std::string& fileName, const int32_t port);
  int32_t recv_add_dmEngine(const int32_t seqid);
  int32_t remove_dmEngine(const std::string& name);
  int32_t send_remove_dmEngine(const std::string& name);
  int32_t recv_remove_dmEngine(const int32_t seqid);
  int32_t describe_dmEngine(const std::string& name);
  int32_t send_describe_dmEngine(const std::string& name);
  int32_t recv_describe_dmEngine(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
