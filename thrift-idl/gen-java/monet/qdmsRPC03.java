/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package monet;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-07-06")
public class qdmsRPC03 {

  public interface Iface {

    public java.lang.String RegisterFile(java.lang.String type, java.lang.String provisionGroupId, java.lang.String updateGroupId, java.lang.String fileName, java.lang.String version, java.lang.String fileCrc) throws org.apache.thrift.TException;

    public java.lang.String UnregisterFile(java.lang.String fileId) throws org.apache.thrift.TException;

    public void QuerySts() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void RegisterFile(java.lang.String type, java.lang.String provisionGroupId, java.lang.String updateGroupId, java.lang.String fileName, java.lang.String version, java.lang.String fileCrc, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void UnregisterFile(java.lang.String fileId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void QuerySts(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String RegisterFile(java.lang.String type, java.lang.String provisionGroupId, java.lang.String updateGroupId, java.lang.String fileName, java.lang.String version, java.lang.String fileCrc) throws org.apache.thrift.TException
    {
      send_RegisterFile(type, provisionGroupId, updateGroupId, fileName, version, fileCrc);
      return recv_RegisterFile();
    }

    public void send_RegisterFile(java.lang.String type, java.lang.String provisionGroupId, java.lang.String updateGroupId, java.lang.String fileName, java.lang.String version, java.lang.String fileCrc) throws org.apache.thrift.TException
    {
      RegisterFile_args args = new RegisterFile_args();
      args.setType(type);
      args.setProvisionGroupId(provisionGroupId);
      args.setUpdateGroupId(updateGroupId);
      args.setFileName(fileName);
      args.setVersion(version);
      args.setFileCrc(fileCrc);
      sendBase("RegisterFile", args);
    }

    public java.lang.String recv_RegisterFile() throws org.apache.thrift.TException
    {
      RegisterFile_result result = new RegisterFile_result();
      receiveBase(result, "RegisterFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RegisterFile failed: unknown result");
    }

    public java.lang.String UnregisterFile(java.lang.String fileId) throws org.apache.thrift.TException
    {
      send_UnregisterFile(fileId);
      return recv_UnregisterFile();
    }

    public void send_UnregisterFile(java.lang.String fileId) throws org.apache.thrift.TException
    {
      UnregisterFile_args args = new UnregisterFile_args();
      args.setFileId(fileId);
      sendBase("UnregisterFile", args);
    }

    public java.lang.String recv_UnregisterFile() throws org.apache.thrift.TException
    {
      UnregisterFile_result result = new UnregisterFile_result();
      receiveBase(result, "UnregisterFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "UnregisterFile failed: unknown result");
    }

    public void QuerySts() throws org.apache.thrift.TException
    {
      send_QuerySts();
      recv_QuerySts();
    }

    public void send_QuerySts() throws org.apache.thrift.TException
    {
      QuerySts_args args = new QuerySts_args();
      sendBase("QuerySts", args);
    }

    public void recv_QuerySts() throws org.apache.thrift.TException
    {
      QuerySts_result result = new QuerySts_result();
      receiveBase(result, "QuerySts");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void RegisterFile(java.lang.String type, java.lang.String provisionGroupId, java.lang.String updateGroupId, java.lang.String fileName, java.lang.String version, java.lang.String fileCrc, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RegisterFile_call method_call = new RegisterFile_call(type, provisionGroupId, updateGroupId, fileName, version, fileCrc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RegisterFile_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String type;
      private java.lang.String provisionGroupId;
      private java.lang.String updateGroupId;
      private java.lang.String fileName;
      private java.lang.String version;
      private java.lang.String fileCrc;
      public RegisterFile_call(java.lang.String type, java.lang.String provisionGroupId, java.lang.String updateGroupId, java.lang.String fileName, java.lang.String version, java.lang.String fileCrc, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.provisionGroupId = provisionGroupId;
        this.updateGroupId = updateGroupId;
        this.fileName = fileName;
        this.version = version;
        this.fileCrc = fileCrc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RegisterFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RegisterFile_args args = new RegisterFile_args();
        args.setType(type);
        args.setProvisionGroupId(provisionGroupId);
        args.setUpdateGroupId(updateGroupId);
        args.setFileName(fileName);
        args.setVersion(version);
        args.setFileCrc(fileCrc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RegisterFile();
      }
    }

    public void UnregisterFile(java.lang.String fileId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UnregisterFile_call method_call = new UnregisterFile_call(fileId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UnregisterFile_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String fileId;
      public UnregisterFile_call(java.lang.String fileId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileId = fileId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UnregisterFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UnregisterFile_args args = new UnregisterFile_args();
        args.setFileId(fileId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_UnregisterFile();
      }
    }

    public void QuerySts(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      QuerySts_call method_call = new QuerySts_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class QuerySts_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public QuerySts_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("QuerySts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        QuerySts_args args = new QuerySts_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("RegisterFile", new RegisterFile());
      processMap.put("UnregisterFile", new UnregisterFile());
      processMap.put("QuerySts", new QuerySts());
      return processMap;
    }

    public static class RegisterFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RegisterFile_args> {
      public RegisterFile() {
        super("RegisterFile");
      }

      public RegisterFile_args getEmptyArgsInstance() {
        return new RegisterFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public RegisterFile_result getResult(I iface, RegisterFile_args args) throws org.apache.thrift.TException {
        RegisterFile_result result = new RegisterFile_result();
        result.success = iface.RegisterFile(args.type, args.provisionGroupId, args.updateGroupId, args.fileName, args.version, args.fileCrc);
        return result;
      }
    }

    public static class UnregisterFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UnregisterFile_args> {
      public UnregisterFile() {
        super("UnregisterFile");
      }

      public UnregisterFile_args getEmptyArgsInstance() {
        return new UnregisterFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public UnregisterFile_result getResult(I iface, UnregisterFile_args args) throws org.apache.thrift.TException {
        UnregisterFile_result result = new UnregisterFile_result();
        result.success = iface.UnregisterFile(args.fileId);
        return result;
      }
    }

    public static class QuerySts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, QuerySts_args> {
      public QuerySts() {
        super("QuerySts");
      }

      public QuerySts_args getEmptyArgsInstance() {
        return new QuerySts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public QuerySts_result getResult(I iface, QuerySts_args args) throws org.apache.thrift.TException {
        QuerySts_result result = new QuerySts_result();
        iface.QuerySts();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("RegisterFile", new RegisterFile());
      processMap.put("UnregisterFile", new UnregisterFile());
      processMap.put("QuerySts", new QuerySts());
      return processMap;
    }

    public static class RegisterFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, RegisterFile_args, java.lang.String> {
      public RegisterFile() {
        super("RegisterFile");
      }

      public RegisterFile_args getEmptyArgsInstance() {
        return new RegisterFile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            RegisterFile_result result = new RegisterFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            RegisterFile_result result = new RegisterFile_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, RegisterFile_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.RegisterFile(args.type, args.provisionGroupId, args.updateGroupId, args.fileName, args.version, args.fileCrc,resultHandler);
      }
    }

    public static class UnregisterFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UnregisterFile_args, java.lang.String> {
      public UnregisterFile() {
        super("UnregisterFile");
      }

      public UnregisterFile_args getEmptyArgsInstance() {
        return new UnregisterFile_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            UnregisterFile_result result = new UnregisterFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            UnregisterFile_result result = new UnregisterFile_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UnregisterFile_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.UnregisterFile(args.fileId,resultHandler);
      }
    }

    public static class QuerySts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, QuerySts_args, Void> {
      public QuerySts() {
        super("QuerySts");
      }

      public QuerySts_args getEmptyArgsInstance() {
        return new QuerySts_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            QuerySts_result result = new QuerySts_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            QuerySts_result result = new QuerySts_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, QuerySts_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.QuerySts(resultHandler);
      }
    }

  }

  public static class RegisterFile_args implements org.apache.thrift.TBase<RegisterFile_args, RegisterFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterFile_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROVISION_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("provisionGroupId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField UPDATE_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updateGroupId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField FILE_CRC_FIELD_DESC = new org.apache.thrift.protocol.TField("fileCrc", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RegisterFile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RegisterFile_argsTupleSchemeFactory();

    public java.lang.String type; // required
    public java.lang.String provisionGroupId; // required
    public java.lang.String updateGroupId; // required
    public java.lang.String fileName; // required
    public java.lang.String version; // required
    public java.lang.String fileCrc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE((short)1, "type"),
      PROVISION_GROUP_ID((short)2, "provisionGroupId"),
      UPDATE_GROUP_ID((short)3, "updateGroupId"),
      FILE_NAME((short)4, "fileName"),
      VERSION((short)5, "version"),
      FILE_CRC((short)6, "fileCrc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // PROVISION_GROUP_ID
            return PROVISION_GROUP_ID;
          case 3: // UPDATE_GROUP_ID
            return UPDATE_GROUP_ID;
          case 4: // FILE_NAME
            return FILE_NAME;
          case 5: // VERSION
            return VERSION;
          case 6: // FILE_CRC
            return FILE_CRC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PROVISION_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("provisionGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UPDATE_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("updateGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_CRC, new org.apache.thrift.meta_data.FieldMetaData("fileCrc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterFile_args.class, metaDataMap);
    }

    public RegisterFile_args() {
    }

    public RegisterFile_args(
      java.lang.String type,
      java.lang.String provisionGroupId,
      java.lang.String updateGroupId,
      java.lang.String fileName,
      java.lang.String version,
      java.lang.String fileCrc)
    {
      this();
      this.type = type;
      this.provisionGroupId = provisionGroupId;
      this.updateGroupId = updateGroupId;
      this.fileName = fileName;
      this.version = version;
      this.fileCrc = fileCrc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RegisterFile_args(RegisterFile_args other) {
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetProvisionGroupId()) {
        this.provisionGroupId = other.provisionGroupId;
      }
      if (other.isSetUpdateGroupId()) {
        this.updateGroupId = other.updateGroupId;
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetVersion()) {
        this.version = other.version;
      }
      if (other.isSetFileCrc()) {
        this.fileCrc = other.fileCrc;
      }
    }

    public RegisterFile_args deepCopy() {
      return new RegisterFile_args(this);
    }

    @Override
    public void clear() {
      this.type = null;
      this.provisionGroupId = null;
      this.updateGroupId = null;
      this.fileName = null;
      this.version = null;
      this.fileCrc = null;
    }

    public java.lang.String getType() {
      return this.type;
    }

    public RegisterFile_args setType(java.lang.String type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public java.lang.String getProvisionGroupId() {
      return this.provisionGroupId;
    }

    public RegisterFile_args setProvisionGroupId(java.lang.String provisionGroupId) {
      this.provisionGroupId = provisionGroupId;
      return this;
    }

    public void unsetProvisionGroupId() {
      this.provisionGroupId = null;
    }

    /** Returns true if field provisionGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetProvisionGroupId() {
      return this.provisionGroupId != null;
    }

    public void setProvisionGroupIdIsSet(boolean value) {
      if (!value) {
        this.provisionGroupId = null;
      }
    }

    public java.lang.String getUpdateGroupId() {
      return this.updateGroupId;
    }

    public RegisterFile_args setUpdateGroupId(java.lang.String updateGroupId) {
      this.updateGroupId = updateGroupId;
      return this;
    }

    public void unsetUpdateGroupId() {
      this.updateGroupId = null;
    }

    /** Returns true if field updateGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateGroupId() {
      return this.updateGroupId != null;
    }

    public void setUpdateGroupIdIsSet(boolean value) {
      if (!value) {
        this.updateGroupId = null;
      }
    }

    public java.lang.String getFileName() {
      return this.fileName;
    }

    public RegisterFile_args setFileName(java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public java.lang.String getVersion() {
      return this.version;
    }

    public RegisterFile_args setVersion(java.lang.String version) {
      this.version = version;
      return this;
    }

    public void unsetVersion() {
      this.version = null;
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return this.version != null;
    }

    public void setVersionIsSet(boolean value) {
      if (!value) {
        this.version = null;
      }
    }

    public java.lang.String getFileCrc() {
      return this.fileCrc;
    }

    public RegisterFile_args setFileCrc(java.lang.String fileCrc) {
      this.fileCrc = fileCrc;
      return this;
    }

    public void unsetFileCrc() {
      this.fileCrc = null;
    }

    /** Returns true if field fileCrc is set (has been assigned a value) and false otherwise */
    public boolean isSetFileCrc() {
      return this.fileCrc != null;
    }

    public void setFileCrcIsSet(boolean value) {
      if (!value) {
        this.fileCrc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((java.lang.String)value);
        }
        break;

      case PROVISION_GROUP_ID:
        if (value == null) {
          unsetProvisionGroupId();
        } else {
          setProvisionGroupId((java.lang.String)value);
        }
        break;

      case UPDATE_GROUP_ID:
        if (value == null) {
          unsetUpdateGroupId();
        } else {
          setUpdateGroupId((java.lang.String)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((java.lang.String)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((java.lang.String)value);
        }
        break;

      case FILE_CRC:
        if (value == null) {
          unsetFileCrc();
        } else {
          setFileCrc((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return getType();

      case PROVISION_GROUP_ID:
        return getProvisionGroupId();

      case UPDATE_GROUP_ID:
        return getUpdateGroupId();

      case FILE_NAME:
        return getFileName();

      case VERSION:
        return getVersion();

      case FILE_CRC:
        return getFileCrc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case PROVISION_GROUP_ID:
        return isSetProvisionGroupId();
      case UPDATE_GROUP_ID:
        return isSetUpdateGroupId();
      case FILE_NAME:
        return isSetFileName();
      case VERSION:
        return isSetVersion();
      case FILE_CRC:
        return isSetFileCrc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof RegisterFile_args)
        return this.equals((RegisterFile_args)that);
      return false;
    }

    public boolean equals(RegisterFile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_provisionGroupId = true && this.isSetProvisionGroupId();
      boolean that_present_provisionGroupId = true && that.isSetProvisionGroupId();
      if (this_present_provisionGroupId || that_present_provisionGroupId) {
        if (!(this_present_provisionGroupId && that_present_provisionGroupId))
          return false;
        if (!this.provisionGroupId.equals(that.provisionGroupId))
          return false;
      }

      boolean this_present_updateGroupId = true && this.isSetUpdateGroupId();
      boolean that_present_updateGroupId = true && that.isSetUpdateGroupId();
      if (this_present_updateGroupId || that_present_updateGroupId) {
        if (!(this_present_updateGroupId && that_present_updateGroupId))
          return false;
        if (!this.updateGroupId.equals(that.updateGroupId))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_version = true && this.isSetVersion();
      boolean that_present_version = true && that.isSetVersion();
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (!this.version.equals(that.version))
          return false;
      }

      boolean this_present_fileCrc = true && this.isSetFileCrc();
      boolean that_present_fileCrc = true && that.isSetFileCrc();
      if (this_present_fileCrc || that_present_fileCrc) {
        if (!(this_present_fileCrc && that_present_fileCrc))
          return false;
        if (!this.fileCrc.equals(that.fileCrc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
      if (isSetType())
        hashCode = hashCode * 8191 + type.hashCode();

      hashCode = hashCode * 8191 + ((isSetProvisionGroupId()) ? 131071 : 524287);
      if (isSetProvisionGroupId())
        hashCode = hashCode * 8191 + provisionGroupId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUpdateGroupId()) ? 131071 : 524287);
      if (isSetUpdateGroupId())
        hashCode = hashCode * 8191 + updateGroupId.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
      if (isSetVersion())
        hashCode = hashCode * 8191 + version.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileCrc()) ? 131071 : 524287);
      if (isSetFileCrc())
        hashCode = hashCode * 8191 + fileCrc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RegisterFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProvisionGroupId()).compareTo(other.isSetProvisionGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvisionGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.provisionGroupId, other.provisionGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUpdateGroupId()).compareTo(other.isSetUpdateGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateGroupId, other.updateGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileCrc()).compareTo(other.isSetFileCrc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileCrc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileCrc, other.fileCrc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RegisterFile_args(");
      boolean first = true;

      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("provisionGroupId:");
      if (this.provisionGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.provisionGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("updateGroupId:");
      if (this.updateGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.updateGroupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileCrc:");
      if (this.fileCrc == null) {
        sb.append("null");
      } else {
        sb.append(this.fileCrc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RegisterFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RegisterFile_argsStandardScheme getScheme() {
        return new RegisterFile_argsStandardScheme();
      }
    }

    private static class RegisterFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<RegisterFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.type = iprot.readString();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROVISION_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.provisionGroupId = iprot.readString();
                struct.setProvisionGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // UPDATE_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.updateGroupId = iprot.readString();
                struct.setUpdateGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.version = iprot.readString();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // FILE_CRC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileCrc = iprot.readString();
                struct.setFileCrcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
        if (struct.provisionGroupId != null) {
          oprot.writeFieldBegin(PROVISION_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.provisionGroupId);
          oprot.writeFieldEnd();
        }
        if (struct.updateGroupId != null) {
          oprot.writeFieldBegin(UPDATE_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.updateGroupId);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.version != null) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
        if (struct.fileCrc != null) {
          oprot.writeFieldBegin(FILE_CRC_FIELD_DESC);
          oprot.writeString(struct.fileCrc);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RegisterFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RegisterFile_argsTupleScheme getScheme() {
        return new RegisterFile_argsTupleScheme();
      }
    }

    private static class RegisterFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<RegisterFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RegisterFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetType()) {
          optionals.set(0);
        }
        if (struct.isSetProvisionGroupId()) {
          optionals.set(1);
        }
        if (struct.isSetUpdateGroupId()) {
          optionals.set(2);
        }
        if (struct.isSetFileName()) {
          optionals.set(3);
        }
        if (struct.isSetVersion()) {
          optionals.set(4);
        }
        if (struct.isSetFileCrc()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetType()) {
          oprot.writeString(struct.type);
        }
        if (struct.isSetProvisionGroupId()) {
          oprot.writeString(struct.provisionGroupId);
        }
        if (struct.isSetUpdateGroupId()) {
          oprot.writeString(struct.updateGroupId);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetVersion()) {
          oprot.writeString(struct.version);
        }
        if (struct.isSetFileCrc()) {
          oprot.writeString(struct.fileCrc);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RegisterFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.type = iprot.readString();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.provisionGroupId = iprot.readString();
          struct.setProvisionGroupIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.updateGroupId = iprot.readString();
          struct.setUpdateGroupIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.version = iprot.readString();
          struct.setVersionIsSet(true);
        }
        if (incoming.get(5)) {
          struct.fileCrc = iprot.readString();
          struct.setFileCrcIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class RegisterFile_result implements org.apache.thrift.TBase<RegisterFile_result, RegisterFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RegisterFile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RegisterFile_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterFile_result.class, metaDataMap);
    }

    public RegisterFile_result() {
    }

    public RegisterFile_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RegisterFile_result(RegisterFile_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public RegisterFile_result deepCopy() {
      return new RegisterFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public RegisterFile_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof RegisterFile_result)
        return this.equals((RegisterFile_result)that);
      return false;
    }

    public boolean equals(RegisterFile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(RegisterFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("RegisterFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RegisterFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RegisterFile_resultStandardScheme getScheme() {
        return new RegisterFile_resultStandardScheme();
      }
    }

    private static class RegisterFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<RegisterFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RegisterFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public RegisterFile_resultTupleScheme getScheme() {
        return new RegisterFile_resultTupleScheme();
      }
    }

    private static class RegisterFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<RegisterFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RegisterFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RegisterFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class UnregisterFile_args implements org.apache.thrift.TBase<UnregisterFile_args, UnregisterFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<UnregisterFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UnregisterFile_args");

    private static final org.apache.thrift.protocol.TField FILE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("fileId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UnregisterFile_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UnregisterFile_argsTupleSchemeFactory();

    public java.lang.String fileId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_ID((short)1, "fileId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_ID
            return FILE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_ID, new org.apache.thrift.meta_data.FieldMetaData("fileId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnregisterFile_args.class, metaDataMap);
    }

    public UnregisterFile_args() {
    }

    public UnregisterFile_args(
      java.lang.String fileId)
    {
      this();
      this.fileId = fileId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UnregisterFile_args(UnregisterFile_args other) {
      if (other.isSetFileId()) {
        this.fileId = other.fileId;
      }
    }

    public UnregisterFile_args deepCopy() {
      return new UnregisterFile_args(this);
    }

    @Override
    public void clear() {
      this.fileId = null;
    }

    public java.lang.String getFileId() {
      return this.fileId;
    }

    public UnregisterFile_args setFileId(java.lang.String fileId) {
      this.fileId = fileId;
      return this;
    }

    public void unsetFileId() {
      this.fileId = null;
    }

    /** Returns true if field fileId is set (has been assigned a value) and false otherwise */
    public boolean isSetFileId() {
      return this.fileId != null;
    }

    public void setFileIdIsSet(boolean value) {
      if (!value) {
        this.fileId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FILE_ID:
        if (value == null) {
          unsetFileId();
        } else {
          setFileId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_ID:
        return getFileId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_ID:
        return isSetFileId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof UnregisterFile_args)
        return this.equals((UnregisterFile_args)that);
      return false;
    }

    public boolean equals(UnregisterFile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fileId = true && this.isSetFileId();
      boolean that_present_fileId = true && that.isSetFileId();
      if (this_present_fileId || that_present_fileId) {
        if (!(this_present_fileId && that_present_fileId))
          return false;
        if (!this.fileId.equals(that.fileId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFileId()) ? 131071 : 524287);
      if (isSetFileId())
        hashCode = hashCode * 8191 + fileId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(UnregisterFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFileId()).compareTo(other.isSetFileId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileId, other.fileId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("UnregisterFile_args(");
      boolean first = true;

      sb.append("fileId:");
      if (this.fileId == null) {
        sb.append("null");
      } else {
        sb.append(this.fileId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UnregisterFile_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public UnregisterFile_argsStandardScheme getScheme() {
        return new UnregisterFile_argsStandardScheme();
      }
    }

    private static class UnregisterFile_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<UnregisterFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UnregisterFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileId = iprot.readString();
                struct.setFileIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UnregisterFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileId != null) {
          oprot.writeFieldBegin(FILE_ID_FIELD_DESC);
          oprot.writeString(struct.fileId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UnregisterFile_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public UnregisterFile_argsTupleScheme getScheme() {
        return new UnregisterFile_argsTupleScheme();
      }
    }

    private static class UnregisterFile_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<UnregisterFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UnregisterFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFileId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileId()) {
          oprot.writeString(struct.fileId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UnregisterFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fileId = iprot.readString();
          struct.setFileIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class UnregisterFile_result implements org.apache.thrift.TBase<UnregisterFile_result, UnregisterFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<UnregisterFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UnregisterFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UnregisterFile_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UnregisterFile_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UnregisterFile_result.class, metaDataMap);
    }

    public UnregisterFile_result() {
    }

    public UnregisterFile_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UnregisterFile_result(UnregisterFile_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public UnregisterFile_result deepCopy() {
      return new UnregisterFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public UnregisterFile_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof UnregisterFile_result)
        return this.equals((UnregisterFile_result)that);
      return false;
    }

    public boolean equals(UnregisterFile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(UnregisterFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("UnregisterFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UnregisterFile_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public UnregisterFile_resultStandardScheme getScheme() {
        return new UnregisterFile_resultStandardScheme();
      }
    }

    private static class UnregisterFile_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<UnregisterFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UnregisterFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UnregisterFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UnregisterFile_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public UnregisterFile_resultTupleScheme getScheme() {
        return new UnregisterFile_resultTupleScheme();
      }
    }

    private static class UnregisterFile_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<UnregisterFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UnregisterFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UnregisterFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class QuerySts_args implements org.apache.thrift.TBase<QuerySts_args, QuerySts_args._Fields>, java.io.Serializable, Cloneable, Comparable<QuerySts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuerySts_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QuerySts_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QuerySts_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuerySts_args.class, metaDataMap);
    }

    public QuerySts_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QuerySts_args(QuerySts_args other) {
    }

    public QuerySts_args deepCopy() {
      return new QuerySts_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof QuerySts_args)
        return this.equals((QuerySts_args)that);
      return false;
    }

    public boolean equals(QuerySts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(QuerySts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QuerySts_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QuerySts_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuerySts_argsStandardScheme getScheme() {
        return new QuerySts_argsStandardScheme();
      }
    }

    private static class QuerySts_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<QuerySts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QuerySts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QuerySts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QuerySts_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuerySts_argsTupleScheme getScheme() {
        return new QuerySts_argsTupleScheme();
      }
    }

    private static class QuerySts_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<QuerySts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QuerySts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QuerySts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class QuerySts_result implements org.apache.thrift.TBase<QuerySts_result, QuerySts_result._Fields>, java.io.Serializable, Cloneable, Comparable<QuerySts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuerySts_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QuerySts_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QuerySts_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuerySts_result.class, metaDataMap);
    }

    public QuerySts_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public QuerySts_result(QuerySts_result other) {
    }

    public QuerySts_result deepCopy() {
      return new QuerySts_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof QuerySts_result)
        return this.equals((QuerySts_result)that);
      return false;
    }

    public boolean equals(QuerySts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(QuerySts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("QuerySts_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class QuerySts_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuerySts_resultStandardScheme getScheme() {
        return new QuerySts_resultStandardScheme();
      }
    }

    private static class QuerySts_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<QuerySts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, QuerySts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, QuerySts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class QuerySts_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public QuerySts_resultTupleScheme getScheme() {
        return new QuerySts_resultTupleScheme();
      }
    }

    private static class QuerySts_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<QuerySts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, QuerySts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, QuerySts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
