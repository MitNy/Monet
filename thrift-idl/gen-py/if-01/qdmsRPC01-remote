#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from if-01 import qdmsRPC01
from if-01.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  void StartQdmsService()')
    print('  void StopQdmsService()')
    print('  void ReportQdmsService()')
    print('  string AddDmEngine(string type, string aliasEngine)')
    print('  string RemoveDmEngine(string type, string aliasEngine)')
    print('  string StartDmEngine(string type, i32 dmindex)')
    print('  string StopDmEngine(string type, i32 dmindex)')
    print('  string QueryDmEngineSts(string type, i32 dmindex)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = qdmsRPC01.Client(protocol)
transport.open()

if cmd == 'StartQdmsService':
    if len(args) != 0:
        print('StartQdmsService requires 0 args')
        sys.exit(1)
    pp.pprint(client.StartQdmsService())

elif cmd == 'StopQdmsService':
    if len(args) != 0:
        print('StopQdmsService requires 0 args')
        sys.exit(1)
    pp.pprint(client.StopQdmsService())

elif cmd == 'ReportQdmsService':
    if len(args) != 0:
        print('ReportQdmsService requires 0 args')
        sys.exit(1)
    pp.pprint(client.ReportQdmsService())

elif cmd == 'AddDmEngine':
    if len(args) != 2:
        print('AddDmEngine requires 2 args')
        sys.exit(1)
    pp.pprint(client.AddDmEngine(args[0], args[1],))

elif cmd == 'RemoveDmEngine':
    if len(args) != 2:
        print('RemoveDmEngine requires 2 args')
        sys.exit(1)
    pp.pprint(client.RemoveDmEngine(args[0], args[1],))

elif cmd == 'StartDmEngine':
    if len(args) != 2:
        print('StartDmEngine requires 2 args')
        sys.exit(1)
    pp.pprint(client.StartDmEngine(args[0], eval(args[1]),))

elif cmd == 'StopDmEngine':
    if len(args) != 2:
        print('StopDmEngine requires 2 args')
        sys.exit(1)
    pp.pprint(client.StopDmEngine(args[0], eval(args[1]),))

elif cmd == 'QueryDmEngineSts':
    if len(args) != 2:
        print('QueryDmEngineSts requires 2 args')
        sys.exit(1)
    pp.pprint(client.QueryDmEngineSts(args[0], eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
